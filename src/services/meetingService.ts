
import { supabase } from "@/integrations/supabase/client";
import { v4 as uuidv4 } from "uuid";

export type Meeting = {
  id: string;
  title: string;
  date: string;
  time?: string;
  participants: string[];
  hasRecording: boolean;
  hasMinutes: boolean;
  hasSummary: boolean;
  recording_url?: string;
  transcript_url?: string;
  minutes?: string;
  summary?: {
    text: string;
    keyTakeaways: string[];
  };
  created_at?: string;
};

export const getMeetings = async (): Promise<Meeting[]> => {
  const { data, error } = await supabase
    .from('meetings')
    .select('*')
    .order('date', { ascending: false });

  if (error) {
    console.error("Error fetching meetings:", error);
    throw error;
  }

  // Transform the data to match our frontend Meeting type
  return data.map((item: any) => ({
    id: item.id,
    title: item.title,
    date: item.date,
    time: item.time,
    participants: item.participants || [],
    hasRecording: item.has_recording || false,
    hasMinutes: !!item.minutes,
    hasSummary: item.has_summary || false,
    recording_url: item.recording_url,
    transcript_url: item.transcript_url,
    minutes: item.minutes,
    summary: item.summary ? {
      text: item.summary.text || "",
      keyTakeaways: item.summary.key_takeaways || []
    } : undefined,
    created_at: item.created_at
  }));
};

export const getMeetingById = async (id: string): Promise<Meeting | null> => {
  const { data, error } = await supabase
    .from('meetings')
    .select('*')
    .eq('id', id)
    .single();

  if (error) {
    console.error("Error fetching meeting:", error);
    return null;
  }

  if (!data) return null;

  // Transform the data to match our frontend Meeting type
  return {
    id: data.id,
    title: data.title,
    date: data.date,
    time: data.time,
    participants: data.participants || [],
    hasRecording: data.has_recording || false,
    hasMinutes: !!data.minutes,
    hasSummary: data.has_summary || false,
    recording_url: data.recording_url,
    transcript_url: data.transcript_url,
    minutes: data.minutes,
    summary: data.summary ? {
      text: data.summary.text || "",
      keyTakeaways: data.summary.key_takeaways || []
    } : undefined,
    created_at: data.created_at
  };
};

export const deleteMeeting = async (id: string): Promise<boolean> => {
  // First, delete any files in storage
  const { data: meeting } = await supabase
    .from('meetings')
    .select('id')
    .eq('id', id)
    .single();

  if (meeting) {
    // Delete any files stored in the meeting folder
    const { error: storageError } = await supabase.storage
      .from('meeting-files')
      .remove([`meetings/${meeting.id}`]);
      
    if (storageError) {
      console.error("Error deleting meeting files:", storageError);
      // Continue anyway to delete the database record
    }
  }

  // Delete the database record
  const { error } = await supabase
    .from('meetings')
    .delete()
    .eq('id', id);

  if (error) {
    console.error("Error deleting meeting:", error);
    return false;
  }

  return true;
};

export const processTranscript = async (meeting_id: string): Promise<boolean> => {
  // In a real implementation, this would call an Edge Function to process the transcript
  // For now, we'll just simulate success
  
  // Mark the meeting as processed in the queue
  const { error: queueError } = await supabase
    .from('meeting_processing_queue')
    .update({ status: 'completed' })
    .eq('meeting_id', meeting_id);
    
  if (queueError) {
    console.error("Error updating processing queue:", queueError);
    return false;
  }
  
  // Update the meeting with a placeholder summary
  const { error: updateError } = await supabase
    .from('meetings')
    .update({
      has_summary: true,
      summary: {
        text: "This is a placeholder summary that would normally be generated by AI from the transcript.",
        key_takeaways: [
          "Key point 1 would be extracted from the transcript.",
          "Action item would be identified here.",
          "Important decision would be noted here."
        ]
      }
    })
    .eq('id', meeting_id);
    
  if (updateError) {
    console.error("Error updating meeting with summary:", updateError);
    return false;
  }
  
  return true;
};
