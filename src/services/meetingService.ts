
import { supabase } from "@/integrations/supabase/client";
import { v4 as uuidv4 } from "uuid";

export type Meeting = {
  id: string;
  title: string;
  date: string;
  time?: string;
  participants: string[];
  hasRecording: boolean;
  hasMinutes: boolean;
  hasSummary: boolean;
  recording_url?: string;
  transcript_url?: string;
  minutes?: string;
  summary?: {
    text: string;
    keyTakeaways: string[];
  };
  created_at?: string;
};

export const getMeetings = async (): Promise<Meeting[]> => {
  try {
    // Use any type assertion to bypass TypeScript's type checking for Supabase client
    const { data, error } = await (supabase as any)
      .from('meetings')
      .select('*')
      .order('date', { ascending: false });

    if (error) {
      console.error("Error fetching meetings:", error);
      throw error;
    }

    // Transform the data to match our frontend Meeting type
    return data.map((item: any) => ({
      id: item.id,
      title: item.title,
      date: item.date,
      time: item.time,
      participants: item.participants || [],
      hasRecording: item.has_recording || false,
      hasMinutes: !!item.minutes,
      hasSummary: item.has_summary || false,
      recording_url: item.recording_url,
      transcript_url: item.transcript_url,
      minutes: item.minutes,
      summary: item.summary ? {
        text: item.summary.text || "",
        keyTakeaways: item.summary.key_takeaways || []
      } : undefined,
      created_at: item.created_at
    }));
  } catch (error) {
    console.error("Error in getMeetings:", error);
    return [];
  }
};

export const getMeetingById = async (id: string): Promise<Meeting | null> => {
  try {
    // Use any type assertion to bypass TypeScript's type checking for Supabase client
    const { data, error } = await (supabase as any)
      .from('meetings')
      .select('*')
      .eq('id', id)
      .single();

    if (error) {
      console.error("Error fetching meeting:", error);
      return null;
    }

    if (!data) return null;

    // Transform the data to match our frontend Meeting type
    return {
      id: data.id,
      title: data.title,
      date: data.date,
      time: data.time,
      participants: data.participants || [],
      hasRecording: data.has_recording || false,
      hasMinutes: !!data.minutes,
      hasSummary: data.has_summary || false,
      recording_url: data.recording_url,
      transcript_url: data.transcript_url,
      minutes: data.minutes,
      summary: data.summary ? {
        text: data.summary.text || "",
        keyTakeaways: data.summary.key_takeaways || []
      } : undefined,
      created_at: data.created_at
    };
  } catch (error) {
    console.error("Error in getMeetingById:", error);
    return null;
  }
};

export const deleteMeeting = async (id: string): Promise<boolean> => {
  try {
    // First, delete any files in storage
    const { data: meeting } = await (supabase as any)
      .from('meetings')
      .select('id')
      .eq('id', id)
      .single();

    if (meeting) {
      // Delete any files stored in the meeting folder
      const { error: storageError } = await (supabase.storage as any)
        .from('meeting-files')
        .remove([`meetings/${meeting.id}`]);
        
      if (storageError) {
        console.error("Error deleting meeting files:", storageError);
        // Continue anyway to delete the database record
      }
    }

    // Delete the database record
    const { error } = await (supabase as any)
      .from('meetings')
      .delete()
      .eq('id', id);

    if (error) {
      console.error("Error deleting meeting:", error);
      return false;
    }

    return true;
  } catch (error) {
    console.error("Error in deleteMeeting:", error);
    return false;
  }
};

export const processTranscript = async (meeting_id: string): Promise<boolean> => {
  try {
    // In a real implementation, this would call an Edge Function to process the transcript
    // For now, we'll just simulate success
    
    // Mark the meeting as processed in the queue
    const { error: queueError } = await (supabase as any)
      .from('meeting_processing_queue')
      .update({ status: 'completed' })
      .eq('meeting_id', meeting_id);
      
    if (queueError) {
      console.error("Error updating processing queue:", queueError);
      return false;
    }
    
    // Update the meeting with a placeholder summary
    const { error: updateError } = await (supabase as any)
      .from('meetings')
      .update({
        has_summary: true,
        summary: {
          text: "This is a placeholder summary that would normally be generated by AI from the transcript.",
          key_takeaways: [
            "Key point 1 would be extracted from the transcript.",
            "Action item would be identified here.",
            "Important decision would be noted here."
          ]
        }
      })
      .eq('id', meeting_id);
      
    if (updateError) {
      console.error("Error updating meeting with summary:", updateError);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error("Error in processTranscript:", error);
    return false;
  }
};

export const uploadFile = async (
  file: File, 
  bucketName: string, 
  path: string,
  onProgress?: (progress: number) => void
): Promise<string | null> => {
  try {
    // Create a FormData instance
    const formData = new FormData();
    formData.append('file', file);

    // Use fetch for upload with progress tracking
    const xhr = new XMLHttpRequest();
    
    // Create a promise to handle the async operation
    const uploadPromise = new Promise<string>((resolve, reject) => {
      xhr.open('POST', `${process.env.SUPABASE_URL || 'https://kiyrtjzwgtqzmkthlkig.supabase.co'}/storage/v1/object/${bucketName}/${path}`);
      
      // Set authorization header
      xhr.setRequestHeader('Authorization', `Bearer ${process.env.SUPABASE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtpeXJ0anp3Z3Rxem1rdGhsa2lnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDI2MDMxMTksImV4cCI6MjA1ODE3OTExOX0.iBB6MDnvCBXCEbncrQmqn2HyQ74mnVvAhr9JDKyJyLQ'}`);
      
      if (onProgress) {
        xhr.upload.onprogress = (event) => {
          if (event.lengthComputable) {
            const percentComplete = Math.round((event.loaded / event.total) * 100);
            onProgress(percentComplete);
          }
        };
      }
      
      xhr.onload = () => {
        if (xhr.status >= 200 && xhr.status < 300) {
          // Get the public URL
          const publicUrl = `${process.env.SUPABASE_URL || 'https://kiyrtjzwgtqzmkthlkig.supabase.co'}/storage/v1/object/public/${bucketName}/${path}`;
          resolve(publicUrl);
        } else {
          reject(new Error(`Upload failed with status ${xhr.status}`));
        }
      };
      
      xhr.onerror = () => reject(new Error('Network error during upload'));
      xhr.send(formData);
    });

    return await uploadPromise;
  } catch (error) {
    console.error('Error uploading file:', error);
    return null;
  }
};

export const createMeeting = async (meetingData: {
  id: string;
  title: string;
  date: string;
  participants: string[];
  recording_url?: string;
  transcript_url?: string;
  minutes?: string;
}): Promise<boolean> => {
  try {
    const { error } = await (supabase as any)
      .from('meetings')
      .insert({
        id: meetingData.id,
        title: meetingData.title,
        date: meetingData.date,
        participants: meetingData.participants,
        recording_url: meetingData.recording_url,
        transcript_url: meetingData.transcript_url,
        minutes: meetingData.minutes,
        has_recording: !!meetingData.recording_url,
        has_minutes: !!meetingData.minutes,
        has_summary: false,
      });

    if (error) throw error;
    return true;
  } catch (error) {
    console.error('Error creating meeting:', error);
    return false;
  }
};

export const createProcessingQueueItem = async (
  meeting_id: string, 
  transcript_url: string
): Promise<boolean> => {
  try {
    const { error } = await (supabase as any)
      .from('meeting_processing_queue')
      .insert({
        meeting_id,
        status: 'pending',
        transcript_url
      });
      
    if (error) throw error;
    return true;
  } catch (error) {
    console.error('Error creating processing queue item:', error);
    return false;
  }
};
